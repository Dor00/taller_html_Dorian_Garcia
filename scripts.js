   
  /* scripts.js
  Objeto de traducciones para espa√±ol e ingl√©s.
  Contiene los textos que se utilizar√°n en la p√°gina.
*/
const translations = {
  es: {
    title: "üê∂ Listado de Razas de Perros",
    selectLabel: "üîé Selecciona una raza:",
    favoritesTitle: "‚ù§Ô∏è Favoritos",
    errorList: "‚ùå Error al obtener la lista de razas:",
    errorImages: "‚ö†Ô∏è Error al obtener im√°genes:",
    noSubbreeds: "Sin subrazas",
    subbreeds: "Subrazas: ",
    darkModeOn: "üåô Modo Oscuro",
    darkModeOff: "‚òÄÔ∏è Modo Claro"
  },
  en: {
    title: "üê∂ Dog Breeds List",
    selectLabel: "üîé Select a breed:",
    favoritesTitle: "‚ù§Ô∏è Favorites",
    errorList: "‚ùå Error fetching breed list:",
    errorImages: "‚ö†Ô∏è Error fetching images:",
    noSubbreeds: "No subbreeds",
    subbreeds: "Subbreeds: ",
    darkModeOn: "üåô Dark Mode",
    darkModeOff: "‚òÄÔ∏è Light Mode"
  }
};

/* el lenguaje por defecto es el espa√±ol */
let currentLanguage = "es";

/* 
  Funci√≥n para actualizar los textos de la p√°gina seg√∫n el idioma seleccionado.
  Se actualizan el t√≠tulo, etiquetas y botones.
*/
function updateTranslations() {
  document.getElementById("titleText").textContent = translations[currentLanguage].title;
  document.getElementById("selectLabel").textContent = translations[currentLanguage].selectLabel;
  document.querySelector("#breed-select option[value='']").textContent = translations[currentLanguage].selectDefault;
  document.getElementById("favoritesTitle").textContent = translations[currentLanguage].favoritesTitle;
  const darkModeToggle = document.getElementById("darkModeToggle");
  if (document.body.classList.contains("dark-mode")) {
    darkModeToggle.textContent = translations[currentLanguage].darkModeOff;
  } else {
    darkModeToggle.textContent = translations[currentLanguage].darkModeOn;
  }
}

// Evento para cambio de idioma al seleccionar en el combo correspondiente.
document.getElementById("languageSelect").addEventListener("change", function () {
  currentLanguage = this.value;
  updateTranslations();
});

/* Variables globales para manipulaci√≥n del DOM */
const breedSelect = document.getElementById("breed-select");
const cardsContainer = document.getElementById("cards-container");
const errorMessageDiv = document.getElementById("error-message");
const favoritesContainer = document.getElementById("favorites-container");
let allBreeds = {};

/* 
  Manejo de favoritos usando localStorage para persistencia
  Se recuperan los favoritos almacenados o se inicializa un array vac√≠o.
*/
let favorites = JSON.parse(localStorage.getItem("favorites")) || [];

/* Funci√≥n para mostrar mensajes de error al usuario */
function displayError(message) {
  errorMessageDiv.innerHTML = `<p>${message}</p>`;
}

/* Funci√≥n para limpiar el mensaje de error */
function clearError() {
  errorMessageDiv.innerHTML = "";
}

/* 
  Funci√≥n para guardar los favoritos en localStorage.
  Se utiliza cada vez que se marca o desmarca un favorito.
*/
function saveFavorites() {
  localStorage.setItem("favorites", JSON.stringify(favorites));
}

/* 
  Funci√≥n para renderizar la secci√≥n de favoritos.
  Recorre el array de favoritos y a√±ade cada tarjeta al contenedor.
*/
function renderFavorites() {
  favoritesContainer.innerHTML = "";
  favorites.forEach((fav) => {
    const card = createCard(fav.imageUrl, fav.breed, fav.attribute, true);
    favoritesContainer.appendChild(card);
  });
}

/*
  Funci√≥n para crear una tarjeta de perro.
  Par√°metros:
    - imageUrl: URL de la imagen a mostrar.
    - breed: Nombre de la raza.
    - attribute: Texto con la informaci√≥n adicional (por ejemplo, subrazas).
    - isFavorite: Bandera para determinar si la tarjeta se muestra en la secci√≥n de favoritos.
*/
function createCard(imageUrl, breed, attribute, isFavorite = false) {
  const card = document.createElement("div");
  card.classList.add("card");
  card.innerHTML = `
    <img src="${imageUrl}" alt="${breed}">
    <h3>${breed}</h3>
    <p>${attribute}</p>
    <button class="favorite">${isFavorite ? "‚ù§Ô∏è" : "ü§ç"}</button>
  `;
  const favButton = card.querySelector("button.favorite");
  // Evento para alternar entre agregar o quitar favorito
  favButton.addEventListener("click", () => {
    const index = favorites.findIndex(
      (fav) => fav.imageUrl === imageUrl && fav.breed === breed
    );
    // Si el elemento ya es favorito, se elimina
    if (index > -1) {
      favorites.splice(index, 1);
      favButton.textContent = "ü§ç";
    } else {
      // Si no es favorito, se agrega al array de favoritos
      favorites.push({ imageUrl, breed, attribute });
      favButton.textContent = "‚ù§Ô∏è";
    }
    saveFavorites();
    renderFavorites();
  });
  return card;
}

/* 
  Configuraci√≥n del bot√≥n para modo oscuro.
  Al hacer clic, se alterna la clase "dark-mode" en el body y se actualizan los textos.
*/
const darkModeToggle = document.getElementById("darkModeToggle");
darkModeToggle.addEventListener("click", () => {
  document.body.classList.toggle("dark-mode");
  updateTranslations();
});

/*
  Se realiza la petici√≥n a la API para obtener la lista completa de razas.
  Si la petici√≥n falla, se muestra un error al usuario.
*/
fetch("https://dog.ceo/api/breeds/list/all")
  .then((response) => {
    if (!response.ok) {
      throw new Error(`${translations[currentLanguage].errorList} ${response.status}`);
    }
    return response.json();
  })
  .then((data) => {
    // Se almacena la lista de razas globalmente
    allBreeds = data.message;
    // Se a√±aden cada una de las razas al select de b√∫squeda
    Object.keys(allBreeds).forEach((breed) => {
      const option = document.createElement("option");
      option.value = breed;
      option.textContent = breed;
      breedSelect.appendChild(option);
    });
  })
  .catch((error) => {
    displayError(error.message);
    console.error("Error fetching breed list:", error);
  });

// Renderizaci√≥n inicial de la secci√≥n de favoritos, si hay elementos guardados
renderFavorites();

/* 
  Evento para mostrar 10 tarjetas al seleccionar una raza del select.
  Se realizan las siguientes acciones:
    1. Se limpia el mensaje de error y las tarjetas actuales.
    2. Se valida que la raza exista.
    3. Se realiza la petici√≥n para obtener 10 im√°genes aleatorias de la raza.
    4. Se muestran las tarjetas con la informaci√≥n correspondiente.
*/
breedSelect.addEventListener("change", () => {
  clearError();
  cardsContainer.innerHTML = "";
  const selectedBreed = breedSelect.value;
  if (selectedBreed) {
    // Validaci√≥n para asegurar que la raza existe en la lista descargada
    if (!(selectedBreed in allBreeds)) {
      displayError("La raza seleccionada no existe.");
      return;
    }
    fetch(`https://dog.ceo/api/breed/${selectedBreed}/images/random/10`)
      .then((response) => {
        if (!response.ok) {
          throw new Error(
            `${translations[currentLanguage].errorImages} ${response.status}`
          );
        }
        return response.json();
      })
      .then((data) => {
        if (data.status !== "success") {
          throw new Error("B√∫squeda no exitosa. Intente con otra raza.");
        }
        // Se determina el atributo adicional (subrazas) a mostrar
        let attribute = translations[currentLanguage].noSubbreeds;
        if (allBreeds[selectedBreed] && allBreeds[selectedBreed].length > 0) {
          attribute =
            translations[currentLanguage].subbreeds +
            allBreeds[selectedBreed].join(", ");
        }
        // Se crean 10 tarjetas, una por cada imagen obtenida de la API
        data.message.forEach((imageUrl) => {
          const card = createCard(imageUrl, selectedBreed, attribute);
          cardsContainer.appendChild(card);
        });
      })
      .catch((error) => {
        displayError(error.message);
        console.error("Error fetching images:", error);
      });
  }
});


// Actualizar los textos de la p√°gina con el idioma actual al cargar
updateTranslations();